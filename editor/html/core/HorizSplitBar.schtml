<div mouseDownMoveUp="=: mouseEvent(mouseDownMoveUp)"  >
   <%!
      // Initialize this component either with splitHeight in pixels or splitPercent in % of the parent element.  Both of these are set and can be bound to as well.
      double splitHeight = 0.0;
      double splitPercent;
      // Borders of the parent element determine how much percentage wise belongs to each half.  
      double maxPercent = 94;
      boolean pressed = false;
      double pressX, pressY;
      double dragLeft, dragTop, dragWidth;
      double minHeight = 10;
      double minPercent = 10;
      double splitWindowPadding = 12; // To choose the initial splitter position (when not initialized), we look at the height of the top window minus this padding amount.

      //double prevWindowHeight := previousElementSibling.offsetHeight;
      //double parentHeight := enclosingTag.offsetHeight;
      double prevWindowHeight;
      double parentHeight;

      boolean smoothSplitter = true;

      void mouseEvent(MouseEvent event) {
         if (event.button != 0)
            return;
         if (event.type.equals("mousedown")) {
            if (!pressed) {
               pressed = true;
               pressX = event.clientX;
               pressY = event.clientY;

               // Starting position for the splitter icon is the same as the splitter tag itself
               dragLeft = offsetLeft;
               dragTop = offsetTop;
               dragWidth = offsetWidth;

               if (splitHeight == 0.0 && splitPercent != 0)
                  splitHeight = parentHeight * (splitPercent / maxPercent);
               // the percentage maps to the height of the containing block
               //maxPercent = 100 - 100 * splitWindowPadding / parentHeight;
            }
            else if (!smoothSplitter) {
               dragLeft = offsetLeft;
               dragTop = offsetTop + event.clientY - pressY;
            }
            event.preventDefault();
         }
         else if (event.type.equals("mousemove")) {
            if (pressed) {
               if (smoothSplitter) {
                  moveSplitter(event);
                  pressX = event.clientX;
                  pressY = event.clientY;
               }
               else {
                  dragLeft = offsetLeft;
                  dragTop = offsetTop + event.clientY - pressY;
               }
               event.preventDefault();
            }
         }
         else if ((event.type.equals("mouseup"))) {
             if (pressed) {
                moveSplitter(event);
                pressed = false;
                event.preventDefault();
             }
         }
         else
            System.err.println("*** Error");
      }

      boolean isUnset() {
         return splitHeight == 0.0 && splitPercent == 0;
      }

      void moveSplitter(MouseEvent event) {
            Element prevSib = this.previousElementSibling;
            // Something messed up in the DOM for this tree.
            if (prevSib == null) {
               return;
            }
            double oldH = isUnset() ? prevWindowHeight - splitWindowPadding : splitHeight;
             //double oldH = splitHeight == 0.0 ? 0 : splitHeight;
            double newHeight = oldH + (event.clientY - pressY); 
            double midHeight = parentHeight / 2;
            double min = Math.min(minHeight, midHeight); 
            if (newHeight < min) {
               splitHeight = min;
            }
            else if (newHeight > parentHeight - min)
               splitHeight = parentHeight - min;
            else  
               splitHeight = newHeight;
            splitPercent = splitHeight / (parentHeight - 2*splitWindowPadding) * maxPercent; 
            if (splitPercent > maxPercent)
               splitPercent = maxPercent - minPercent;
            else if (splitPercent < 0)
               splitPercent = minPercent;
            System.out.println("Setting splitHeight=" + newHeight + " splitPercent=" + splitPercent + " parentHeight=" + parentHeight);
      }

    %>

    <div class="horizSplitThumb"></div>
    <div id="horizDragSplitter" style=':= "z-index: 99; position: absolute; left: " + dragLeft + "px; top: " + dragTop + "px; width: " + dragWidth + "px;"' visible=":= pressed && !smoothSplitter">
       <div class="horizSplitThumb"></div>
    </div>
</div>
