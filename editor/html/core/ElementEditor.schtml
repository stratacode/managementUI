<div id="ElementEditor" style=':= cellMode ? "width: " + cellWidth + "px" : ""' class=':= elemClass'>
<%!
   int elementSubmitCount;
   // The code to submit a change made directly to a form in this element editor.  This is done in a binding because setElementValue is a remote
   // method - it will set errorText when the remote result is received.
   elementSubmitCount =: instanceMode && !editorModel.pendingCreate ?
      errorText = editorModel.updateInstanceProperty(propC, propertyName, formEditor.instance, formEditor.wrapper, elementValue) :
      errorText = parentView.editorModel.setElementValue(formEditor.type, formEditor.instance, propC, String.valueOf(elementValue), !instanceMode, instanceMode, formEditor.instance == null);
   String cssClass = "elementEditor";
   String elemClass;

   repeatIndex =: listIndex;

   abstract String getFieldId();

   void onFocusEvent() {
      parentView.editorModel.currentProperty = propC;
   }

   void updateComputedValues() {
      super.updateComputedValues();
      elemClass = cssClass + (rowStart ? " rowStart" : "");
   }

%>
   <!-- Defines the label as an abstract class so implementations can easily instantiate one and customize it -->
   <label abstract="true" id="ElementLabel" for="= fieldId" class="formFieldLabel">
      <img class="elementIcon" visible=":= icon != null" src=':= iconPath' alt=':= iconAlt'/>
      <%= propertyName %> <%= getOperatorDisplayStr(formEditor.instance, varInit) %>&nbsp;</label>
   <div abstract="true" id="ErrorText" visible=":= TextUtil.length(errorText) > 0" class="errorText"><%= errorText %></div>
</div>
